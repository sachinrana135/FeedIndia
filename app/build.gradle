apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'com.google.firebase.crashlytics'

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {

    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    signingConfigs {
        config {
            def Properties keyProps = new Properties()
            keyProps.load(new FileInputStream(file(RELEASE_KEYSTORE_PROPS_FILE)))
            keyAlias keyProps["RELEASE_KEY_ALIAS"]
            keyPassword keyProps["RELEASE_KEY_PASSWORD"]
            storeFile file(keyProps["RELEASE_STORE_FILE"])
            storePassword keyProps["RELEASE_STORE_PASSWORD"]
        }
    }

    defaultConfig {
        applicationId "com.alfanse.feedmycity"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFile 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {

        dev {
            dimension "default"

            def Properties devProps = new Properties()
            applicationIdSuffix devProps["APPLICATION_ID_SUFFIX"]
            versionNameSuffix devProps["VERSION_NAME_SUFFIX"]
            devProps.load(new FileInputStream(file(DEVELOPMENT_PROPS_FILE)))
            buildConfigField("String", "API_BASE_URL", devProps["API_BASE_URL"])
            buildConfigField("String", "WEB_BASE_URL", devProps["WEB_BASE_URL"])
            buildConfigField("String", "API_TOKEN", devProps["API_TOKEN"]);
            resValue("string", "app_name", devProps["APP_NAME"])
            resValue("string", "google_maps_key", localProperties['apiKey'])
        }
        prod {
            dimension "default"
            def Properties prodProps = new Properties()
            prodProps.load(new FileInputStream(file(PRODUCTION_PROPS_FILE)))
            buildConfigField("String", "API_BASE_URL", prodProps["API_BASE_URL"])
            buildConfigField("String", "WEB_BASE_URL", prodProps["WEB_BASE_URL"])
            buildConfigField("String", "API_TOKEN", prodProps["API_TOKEN"]);
            resValue("string", "app_name", prodProps["APP_NAME"])
            resValue("string", "google_maps_key", localProperties['apiKey'])
        }

    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

configurations.all {
    exclude group: 'com.google.guava', module: 'listenablefuture'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation libraries
    kapt librariesKapt

    testImplementation testLibraries
    androidTestImplementation androidTestLibraries
}
